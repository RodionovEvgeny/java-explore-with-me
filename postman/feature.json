{
	"info": {
		"_postman_id": "6fc70266-8ccb-435e-a1ed-a3647f6789cb",
		"name": "Test Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28221997"
	},
	"item": [
		{
			"name": "Private endpoints",
			"item": [
				{
					"name": "Success tests",
					"item": [
						{
							"name": "Добавление нового комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/events/:eid/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"events",
										":eid",
										"comments",
										""
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "eid",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев пользователя без параметров",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": null,
											"disabled": true
										},
										{
											"key": "commentState",
											"value": null,
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": null,
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев пользователя с параметрами",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"         const event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.addComment(user.id, event1.id,rnd.getComment())\r",
											"        await api.addComment(user.id, event1.id,rnd.getComment())\r",
											"        await api.addComment(user.id, event2.id,rnd.getComment())\r",
											"        \r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event1.id)\r",
											"        \r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commentState",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"New Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation tests",
					"item": [
						{
							"name": "Добавление нового комментария от несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/events/:eid/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"events",
										":eid",
										"comments",
										""
									],
									"variable": [
										{
											"key": "uid",
											"value": "9999"
										},
										{
											"key": "eid",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария к несуществующему событию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/events/:eid/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"events",
										":eid",
										"comments",
										""
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "eid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария с пустым текстом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/events/:eid/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"events",
										":eid",
										"comments",
										""
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "eid",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария со слишком длиннымтым текстом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"йцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукен1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/events/:eid/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"events",
										":eid",
										"comments",
										""
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "eid",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение несуществующего комментария по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария по id от несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "9999"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария по id от не автора",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user2.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": null,
											"disabled": true
										},
										{
											"key": "commentState",
											"value": null,
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": null,
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев пользователя с неправильными датами",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments?rangeStart=2000-10-10 00:00:00&rangeEnd=1999-10-10 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "",
											"disabled": true
										},
										{
											"key": "commentState",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2000-10-10 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "1999-10-10 00:00:00"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария несуществующим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"New Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "9999"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление несуществующего комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"New Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария с пустым текстом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария со слишком длинным текстом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"йцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукенйцукен1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария не автором",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user2.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"New Text\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария несуществующим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "9999"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление несуществующего комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария не автором",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user2.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:uid/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":uid",
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "{{uid}}"
										},
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Public endpoints",
			"item": [
				{
					"name": "Success tests",
					"item": [
						{
							"name": "Получение комментария по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        api.publishComment(comment.id,\"CONFIRM\")\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        api.publishComment(comment.id,\"CONFIRM\")\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation tests",
					"item": [
						{
							"name": "Получение несуществующего комментария по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        api.publishComment(comment.id,\"CONFIRM\")\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "cid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение не опубликованного комментария по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        \r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":cid"
									],
									"variable": [
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев несуществующего события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        api.publishComment(comment.id,\"CONFIRM\")\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments?eventId=9999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев  без id события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        api.publishComment(comment.id,\"CONFIRM\")\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "9999",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin endpoints",
			"item": [
				{
					"name": "Success tests",
					"item": [
						{
							"name": "Получение всех комментариев без параметров",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": null,
											"disabled": true
										},
										{
											"key": "eventId",
											"value": "",
											"disabled": true
										},
										{
											"key": "commentState",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев с параметрами",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"         const event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.addComment(user.id, event1.id,rnd.getComment())\r",
											"        await api.addComment(user2.id, event1.id,rnd.getComment())\r",
											"        await api.addComment(user.id, event2.id,rnd.getComment())\r",
											"        \r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event1.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?userId={{uid}}&eventId={{eid}}&commentState=PENDING&rangeStart=2000-10-10 00:00:00&rangeEnd=2200-10-10 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commentState",
											"value": "PENDING"
										},
										{
											"key": "rangeStart",
											"value": "2000-10-10 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "2200-10-10 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Публикация комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:cid?commentStateAction=CONFIRM",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":cid"
									],
									"query": [
										{
											"key": "commentStateAction",
											"value": "CONFIRM"
										}
									],
									"variable": [
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отказ в публикации комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:cid?commentStateAction=REJECT",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":cid"
									],
									"query": [
										{
											"key": "commentStateAction",
											"value": "REJECT"
										}
									],
									"variable": [
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation tests",
					"item": [
						{
							"name": "Получение всех комментариев несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?userId=9999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "9999"
										},
										{
											"key": "eventId",
											"value": "",
											"disabled": true
										},
										{
											"key": "commentState",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев несуществующего события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId=9999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "",
											"disabled": true
										},
										{
											"key": "eventId",
											"value": "9999"
										},
										{
											"key": "commentState",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев с неправильными датами",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?rangeStart=2000-10-10 00:00:00&rangeEnd=1999-10-10 00:00:00",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "",
											"disabled": true
										},
										{
											"key": "eventId",
											"value": "",
											"disabled": true
										},
										{
											"key": "commentState",
											"value": "",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2000-10-10 00:00:00"
										},
										{
											"key": "rangeEnd",
											"value": "1999-10-10 00:00:00"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Публикация несуществующего комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:cid?commentStateAction=CONFIRM",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":cid"
									],
									"query": [
										{
											"key": "commentStateAction",
											"value": "CONFIRM"
										}
									],
									"variable": [
										{
											"key": "cid",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Публикация комментария без commentStateAction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let compilation;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        const comment = await api.addComment(user.id, event.id,rnd.getComment())\r",
											"        pm.collectionVariables.set(\"uid\",user.id)\r",
											"        pm.collectionVariables.set(\"eid\",event.id)\r",
											"        pm.collectionVariables.set(\"cid\",comment.id)\r",
											"        \r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":cid"
									],
									"query": [
										{
											"key": "commentStateAction",
											"value": "CONFIRM",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "cid",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async publishComment(commentId, stateAction, verbose=null) {",
					"        return this.patch( \"/admin/comments/\" + commentId + \"?commentStateAction=\" + stateAction, {}, \"Ошибка при модерации комментария: \", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')           ",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "cid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		}
	]
}